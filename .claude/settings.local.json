{
  "permissions": {
    "allow": [
      "Bash(grep:*)",
      "Bash(ls:*)",
      "Bash(source:*)",
      "Bash(find:*)",
      "Bash(mv:*)",
      "Bash(mkdir:*)",
      "Bash(tree:*)",
      "Bash(ruff:*)",
      "Bash(touch:*)",
      "Bash(chmod:*)",
      "Bash(cat:*)",
      "Bash(ruff check:*)",
      "Bash(pytest:*)",
      "Bash(python:*)",
      "Bash(python -m pytest:*)",
      "Bash(python3 -m pytest:*)",
      "WebFetch(domain:*)",
      "Bash(gh issue view:*)",
      "WebFetch(domain:docs.anthropic.com)",
      "Bash(for:*)",
      "Bash(do echo \"=== $file ===\")",
      "Bash(done)",
      "Bash(xargs file:*)",
      "Read(//mnt/e/AI/**)",
      "Bash(git remote get-url:*)",
      "WebSearch",
      "WebFetch(domain:code.visualstudio.com)",
      "WebFetch(domain:github.com)",
      "WebFetch(domain:docs.github.com)",
      "Bash(head:*)",
      "Bash(tail:*)",
      "Bash(sed:*)",
      "Bash(if [ \"$agent\" = \"technical\" ])",
      "Bash(then find /mnt/e/AI/my_name_is_claude/.claude/prompts/agents -path \"*documentation*\" -name \"*.md\")",
      "Bash(else find /mnt/e/AI/my_name_is_claude/.claude/prompts/agents -path \"*$agent*\" -name \"*.md\")",
      "Bash(fi)",
      "Bash(echo:*)",
      "Bash(git add:*)",
      "Bash(xargs rm:*)",
      "Bash(command -v:*)",
      "Bash(apt list:*)",
      "Bash(sudo apt:*)",
      "Bash(sudo apt install:*)",
      "Bash(sudo:*)",
      "Bash(get_mcp_list)",
      "Bash(jq:*)",
      "Bash(pip3 install:*)",
      "Bash(awk:*)",
      "Bash(cut:*)",
      "Bash(sort:*)",
      "Bash(uniq:*)",
      "Bash(wc:*)",
      "Bash(diff:*)",
      "Bash(patch:*)",
      "Bash(tar:*)",
      "Bash(zip:*)",
      "Bash(unzip:*)",
      "Bash(gzip:*)",
      "Bash(gunzip:*)",
      "Bash(curl:*)",
      "Bash(wget:*)",
      "Bash(rsync:*)",
      "Bash(scp:*)",
      "Bash(ssh:*)",
      "Bash(ping:*)",
      "Bash(nslookup:*)",
      "Bash(dig:*)",
      "Bash(netstat:*)",
      "Bash(ps:*)",
      "Bash(top:*)",
      "Bash(htop:*)",
      "Bash(free:*)",
      "Bash(df:*)",
      "Bash(du:*)",
      "Bash(mount:*)",
      "Bash(umount:*)",
      "Bash(lsof:*)",
      "Bash(stat:*)",
      "Bash(file:*)",
      "Bash(which:*)",
      "Bash(whereis:*)",
      "Bash(whoami:*)",
      "Bash(id:*)",
      "Bash(groups:*)",
      "Bash(su:*)",
      "Bash(passwd:*)",
      "Bash(chown:*)",
      "Bash(chgrp:*)",
      "Bash(umask:*)",
      "Bash(alias:*)",
      "Bash(unalias:*)",
      "Bash(history:*)",
      "Bash(fc:*)",
      "Bash(jobs:*)",
      "Bash(bg:*)",
      "Bash(fg:*)",
      "Bash(nohup:*)",
      "Bash(screen:*)",
      "Bash(tmux:*)",
      "Bash(date:*)",
      "Bash(cal:*)",
      "Bash(uptime:*)",
      "Bash(uname:*)",
      "Bash(env:*)",
      "Bash(export:*)",
      "Bash(unset:*)",
      "Bash(set:*)",
      "Bash(shopt:*)",
      "Bash(ulimit:*)",
      "Bash(type:*)",
      "Bash(declare:*)",
      "Bash(readonly:*)",
      "Bash(local:*)",
      "Bash(return:*)",
      "Bash(exit:*)",
      "Bash(break:*)",
      "Bash(continue:*)",
      "Bash(shift:*)",
      "Bash(getopts:*)",
      "Bash(read:*)",
      "Bash(select:*)",
      "Bash(case:*)",
      "Bash(while:*)",
      "Bash(until:*)",
      "Bash(test:*)",
      "Bash([:*)",
      "Bash(let:*)",
      "Bash(expr:*)",
      "Bash(bc:*)",
      "Bash(dc:*)",
      "Bash(seq:*)",
      "Bash(shuf:*)",
      "Bash(factor:*)",
      "Bash(base64:*)",
      "Bash(md5sum:*)",
      "Bash(sha256sum:*)",
      "Bash(sha512sum:*)",
      "Bash(openssl:*)",
      "Bash(gpg:*)",
      "Bash(git status:*)",
      "Bash(git log:*)",
      "Bash(git show:*)",
      "Bash(git diff:*)",
      "Bash(git branch:*)",
      "Bash(git checkout:*)",
      "Bash(git merge:*)",
      "Bash(git pull:*)",
      "Bash(git push:*)",
      "Bash(git fetch:*)",
      "Bash(git clone:*)",
      "Bash(git init:*)",
      "Bash(git config:*)",
      "Bash(git tag:*)",
      "Bash(git stash:*)",
      "Bash(git reset:*)",
      "Bash(git revert:*)",
      "Bash(git cherry-pick:*)",
      "Bash(git rebase:*)",
      "Bash(git blame:*)",
      "Bash(git bisect:*)",
      "Bash(git submodule:*)",
      "Bash(git worktree:*)",
      "Bash(gh auth:*)",
      "Bash(gh repo:*)",
      "Bash(gh pr:*)",
      "Bash(gh issue:*)",
      "Bash(gh workflow:*)",
      "Bash(gh release:*)",
      "Bash(gh gist:*)",
      "Bash(npm install:*)",
      "Bash(npm run:*)",
      "Bash(npm start:*)",
      "Bash(npm test:*)",
      "Bash(npm build:*)",
      "Bash(npm list:*)",
      "Bash(npm info:*)",
      "Bash(npm search:*)",
      "Bash(npm audit:*)",
      "Bash(npm update:*)",
      "Bash(npm outdated:*)",
      "Bash(npm init:*)",
      "Bash(npm version:*)",
      "Bash(npm publish:*)",
      "Bash(npm unpublish:*)",
      "Bash(yarn install:*)",
      "Bash(yarn add:*)",
      "Bash(yarn remove:*)",
      "Bash(yarn upgrade:*)",
      "Bash(yarn run:*)",
      "Bash(yarn start:*)",
      "Bash(yarn test:*)",
      "Bash(yarn build:*)",
      "Bash(yarn info:*)",
      "Bash(yarn audit:*)",
      "Bash(pnpm install:*)",
      "Bash(pnpm add:*)",
      "Bash(pnpm remove:*)",
      "Bash(pnpm update:*)",
      "Bash(pnpm run:*)",
      "Bash(pnpm start:*)",
      "Bash(pnpm test:*)",
      "Bash(pnpm build:*)",
      "Bash(pip install:*)",
      "Bash(pip uninstall:*)",
      "Bash(pip list:*)",
      "Bash(pip show:*)",
      "Bash(pip search:*)",
      "Bash(pip freeze:*)",
      "Bash(pip check:*)",
      "Bash(pipenv install:*)",
      "Bash(pipenv shell:*)",
      "Bash(pipenv run:*)",
      "Bash(poetry install:*)",
      "Bash(poetry add:*)",
      "Bash(poetry remove:*)",
      "Bash(poetry run:*)",
      "Bash(poetry shell:*)",
      "Bash(conda install:*)",
      "Bash(conda create:*)",
      "Bash(conda activate:*)",
      "Bash(conda deactivate:*)",
      "Bash(conda list:*)",
      "Bash(conda info:*)",
      "Bash(virtualenv:*)",
      "Bash(venv:*)",
      "Bash(java:*)",
      "Bash(javac:*)",
      "Bash(mvn:*)",
      "Bash(gradle:*)",
      "Bash(ant:*)",
      "Bash(dotnet:*)",
      "Bash(nuget:*)",
      "Bash(msbuild:*)",
      "Bash(go:*)",
      "Bash(cargo:*)",
      "Bash(rustc:*)",
      "Bash(ruby:*)",
      "Bash(gem:*)",
      "Bash(bundle:*)",
      "Bash(php:*)",
      "Bash(composer:*)",
      "Bash(perl:*)",
      "Bash(cpan:*)",
      "Bash(lua:*)",
      "Bash(luarocks:*)",
      "Bash(r:*)",
      "Bash(rscript:*)",
      "Bash(julia:*)",
      "Bash(swift:*)",
      "Bash(kotlin:*)",
      "Bash(scala:*)",
      "Bash(sbt:*)",
      "Bash(clojure:*)",
      "Bash(lein:*)",
      "Bash(elixir:*)",
      "Bash(mix:*)",
      "Bash(erlang:*)",
      "Bash(rebar3:*)",
      "Bash(haskell:*)",
      "Bash(cabal:*)",
      "Bash(stack:*)",
      "Bash(ocaml:*)",
      "Bash(opam:*)",
      "Bash(dune:*)",
      "Bash(dart:*)",
      "Bash(pub:*)",
      "Bash(flutter:*)",
      "Bash(docker:*)",
      "Bash(docker-compose:*)",
      "Bash(podman:*)",
      "Bash(kubectl:*)",
      "Bash(helm:*)",
      "Bash(minikube:*)",
      "Bash(k3s:*)",
      "Bash(terraform:*)",
      "Bash(ansible:*)",
      "Bash(vagrant:*)",
      "Bash(packer:*)",
      "Bash(consul:*)",
      "Bash(vault:*)",
      "Bash(nomad:*)",
      "Bash(aws:*)",
      "Bash(az:*)",
      "Bash(gcloud:*)",
      "Bash(heroku:*)",
      "Bash(vercel:*)",
      "Bash(netlify:*)",
      "Bash(mysql:*)",
      "Bash(psql:*)",
      "Bash(sqlite3:*)",
      "Bash(mongo:*)",
      "Bash(redis-cli:*)",
      "Bash(elasticsearch:*)",
      "Bash(kibana:*)",
      "Bash(logstash:*)",
      "Bash(influxdb:*)",
      "Bash(grafana:*)",
      "Bash(prometheus:*)",
      "Bash(node:*)",
      "Bash(nodemon:*)",
      "Bash(pm2:*)",
      "Bash(forever:*)",
      "Bash(supervisor:*)",
      "Bash(systemctl:*)",
      "Bash(service:*)",
      "Bash(crontab:*)",
      "Bash(at:*)",
      "Bash(batch:*)",
      "Bash(watch:*)",
      "Bash(timeout:*)",
      "Bash(sleep:*)",
      "Bash(wait:*)",
      "Bash(kill:*)",
      "Bash(killall:*)",
      "Bash(pkill:*)",
      "Bash(pgrep:*)",
      "Bash(nohup:*)",
      "Bash(disown:*)",
      "Bash(trap:*)",
      "Bash(strace:*)",
      "Bash(ltrace:*)",
      "Bash(gdb:*)",
      "Bash(valgrind:*)",
      "Bash(perf:*)",
      "Bash(strace:*)",
      "Bash(ldd:*)",
      "Bash(nm:*)",
      "Bash(objdump:*)",
      "Bash(readelf:*)",
      "Bash(hexdump:*)",
      "Bash(xxd:*)",
      "Bash(od:*)",
      "Bash(strings:*)",
      "Bash(strip:*)",
      "Bash(make:*)",
      "Bash(cmake:*)",
      "Bash(autoconf:*)",
      "Bash(automake:*)",
      "Bash(libtool:*)",
      "Bash(pkg-config:*)",
      "Bash(cc:*)",
      "Bash(gcc:*)",
      "Bash(g++:*)",
      "Bash(clang:*)",
      "Bash(clang++:*)",
      "Bash(ld:*)",
      "Bash(ar:*)",
      "Bash(ranlib:*)",
      "Bash(size:*)",
      "Bash(strip:*)",
      "Bash(vi:*)",
      "Bash(vim:*)",
      "Bash(nano:*)",
      "Bash(emacs:*)",
      "Bash(code:*)",
      "Bash(subl:*)",
      "Bash(atom:*)",
      "Bash(less:*)",
      "Bash(more:*)",
      "Bash(most:*)",
      "Bash(bat:*)",
      "Bash(rg:*)",
      "Bash(ag:*)",
      "Bash(ack:*)",
      "Bash(ripgrep:*)",
      "Bash(fd:*)",
      "Bash(fzf:*)",
      "Bash(exa:*)",
      "Bash(zsh:*)",
      "Bash(fish:*)",
      "Bash(tcsh:*)",
      "Bash(csh:*)",
      "Bash(dash:*)",
      "Bash(ash:*)",
      "Bash(ksh:*)",
      "Bash(bash:*)",
      "Bash(sh:*)",
      "WebFetch(domain:stackoverflow.com)",
      "WebFetch(domain:developer.mozilla.org)",
      "WebFetch(domain:w3schools.com)",
      "WebFetch(domain:nodejs.org)",
      "WebFetch(domain:python.org)",
      "WebFetch(domain:reactjs.org)",
      "WebFetch(domain:angular.io)",
      "WebFetch(domain:vuejs.org)",
      "WebFetch(domain:docker.com)",
      "WebFetch(domain:kubernetes.io)",
      "WebFetch(domain:terraform.io)",
      "WebFetch(domain:ansible.com)",
      "WebFetch(domain:aws.amazon.com)",
      "WebFetch(domain:cloud.google.com)",
      "WebFetch(domain:azure.microsoft.com)",
      "WebFetch(domain:jetbrains.com)",
      "WebFetch(domain:atlassian.com)",
      "WebFetch(domain:npmjs.com)",
      "WebFetch(domain:pypi.org)",
      "WebFetch(domain:maven.apache.org)",
      "WebFetch(domain:gradle.org)",
      "WebFetch(domain:nuget.org)",
      "WebFetch(domain:crates.io)",
      "WebFetch(domain:rubygems.org)",
      "WebFetch(domain:packagist.org)",
      "WebFetch(domain:pub.dev)",
      "WebFetch(domain:hex.pm)",
      "WebFetch(domain:hackage.haskell.org)",
      "WebFetch(domain:opam.ocaml.org)",
      "WebFetch(domain:clojars.org)",
      "WebFetch(domain:brew.sh)",
      "WebFetch(domain:chocolatey.org)",
      "WebFetch(domain:scoop.sh)",
      "WebFetch(domain:winget.run)",
      "WebFetch(domain:flathub.org)",
      "WebFetch(domain:snapcraft.io)",
      "WebFetch(domain:appimage.org)",
      "Read(/mnt/e/AI/**)",
      "Read(/home/**)",
      "Read(/tmp/**)",
      "Read(/var/tmp/**)",
      "Read(/opt/**)",
      "Read(/usr/local/**)",
      "Write(/mnt/e/AI/**)",
      "Write(/tmp/**)",
      "Write(/var/tmp/**)",
      "Edit(/mnt/e/AI/**)",
      "Edit(/tmp/**)",
      "Edit(/var/tmp/**)",
      "MultiEdit(/mnt/e/AI/**)",
      "MultiEdit(/tmp/**)",
      "MultiEdit(/var/tmp/**)",
      "Glob(/mnt/e/AI/**)",
      "Glob(/tmp/**)",
      "Glob(/var/tmp/**)",
      "Grep(/mnt/e/AI/**)",
      "Grep(/tmp/**)",
      "Grep(/var/tmp/**)",
      "Bash(cp:*)",
      "Bash(pip3 list:*)",
      "Bash(pip3:*)",
      "Bash(./ai-tools.sh:*)",
      "Bash(./.ai-tools/discovery/agent_discovery.sh:*)",
      "Bash(./.ai-tools/discovery/simple_agent_browser.sh:*)",
      "Bash(./.ai-tools/templates/template_manager.sh:*)",
      "Bash(./.ai-tools/validation/quality_validator.sh:*)",
      "Bash(/mnt/e/AI/my_name_is_claude/.ai-tools/templates/template_manager.sh:*)",
      "Bash(xargs:*)",
      "Bash(do echo \"=== $script ===\")",
      "Bash(if [[ -d '/mnt/e/AI/my_name_is_claude/.ai-tools/core' ]])",
      "Bash(then echo \"PASS: AI Tools core directory exists\")",
      "Bash(else echo \"FAIL: AI Tools core directory missing\")",
      "Bash(if [[ -f '/mnt/e/AI/my_name_is_claude/.ai-tools/core/bin/project_analyzer.py' ]])",
      "Bash(then echo \"PASS: Project analyzer exists\")",
      "Bash(else echo \"FAIL: Project analyzer missing\")",
      "Bash(if [[ -f '/mnt/e/AI/my_name_is_claude/.ai-tools/core/integration/ai_agent_selector.py' ]])",
      "Bash(then echo \"PASS: Agent selector exists\")",
      "Bash(else echo \"FAIL: Agent selector missing\")",
      "Bash(if [[ -f '/mnt/e/AI/my_name_is_claude/.ai-tools/setup/framework_wizard.sh' ]])",
      "Bash(then echo \"PASS: Framework wizard exists\")",
      "Bash(else echo \"FAIL: Framework wizard missing\")",
      "Bash(if [[ -f '/mnt/e/AI/my_name_is_claude/.ai-tools/discovery/simple_agent_browser.sh' ]])",
      "Bash(then echo \"PASS: Agent discovery exists\")",
      "Bash(else echo \"FAIL: Agent discovery missing\")",
      "Bash(if [[ -f '/mnt/e/AI/my_name_is_claude/.ai-tools/templates/template_manager.sh' ]])",
      "Bash(then echo \"PASS: Template manager exists\")",
      "Bash(else echo \"FAIL: Template manager missing\")",
      "Bash(if [[ -f '/mnt/e/AI/my_name_is_claude/ai-tools.sh' ]])",
      "Bash(then echo \"PASS: Main launcher exists\")",
      "Bash(else echo \"FAIL: Main launcher missing\")",
      "Bash(if [[ -x '/mnt/e/AI/my_name_is_claude/.ai-tools/setup/framework_wizard.sh' ]])",
      "Bash(then echo \"PASS: Framework wizard is executable\")",
      "Bash(else echo \"FAIL: Framework wizard not executable\")",
      "Bash(if [[ -x '/mnt/e/AI/my_name_is_claude/.ai-tools/discovery/simple_agent_browser.sh' ]])",
      "Bash(then echo \"PASS: Agent discovery is executable\")",
      "Bash(else echo \"FAIL: Agent discovery not executable\")",
      "Bash(if [[ -x '/mnt/e/AI/my_name_is_claude/.ai-tools/templates/template_manager.sh' ]])",
      "Bash(then echo \"PASS: Template manager is executable\")",
      "Bash(else echo \"FAIL: Template manager not executable\")",
      "Bash(if [[ -x '/mnt/e/AI/my_name_is_claude/ai-tools.sh' ]])",
      "Bash(then echo \"PASS: Main launcher is executable\")",
      "Bash(else echo \"FAIL: Main launcher not executable\")",
      "Bash(./test_validation.sh:*)",
      "Bash(./debug_validation.sh:*)",
      "Bash(/dev/null)",
      "Bash(PROJECT_DIR=\"/mnt/e/AI/my_name_is_claude\")",
      "Bash(./test_exact_validation.sh:*)",
      "Bash(./copy_framework_to_project.sh:*)",
      "Bash(do cp -r ../tests/test001/* ../tests/test$i/)",
      "Bash(do echo \"Copying framework to test$i...\")",
      "Bash(do echo \"=== Copying to $dir ===\")",
      "Bash(git commit:*)",
      "Bash(git rm:*)",
      "Bash(/mnt/e/AI/my_name_is_claude/ai-tools.sh:*)",
      "Read(//tmp/test_wxwidgets_project/**)",
      "Bash(do echo \"=== $dir ===\")",
      "Bash(do echo \"=== Kopiowanie do test$i ===\")",
      "Read(//mnt/e/C++/Projekty/Apps/wxwidgets_book_examples/OpenGL/**)",
      "Bash(./prepare_tests.sh:*)",
      "Bash(/mnt/e/AI/tests/copy_framework_to_project.sh)",
      "Bash(/mnt/e/AI/tests/copy_everything_correctly.sh:*)",
      "Bash(git check-ignore:*)",
      "Bash(do echo \"=== Kopiowanie frameworka do test$i ===\")",
      "Bash(do echo \"Kopiowanie do test$i...\")",
      "Bash(do echo -n \"test$i: \")",
      "Bash(.ai-tools/venv/bin/pip install:*)",
      "Bash(./.ai-tools/setup/framework_wizard.sh:*)",
      "Bash(__NEW_LINE__ echo \"1. Testing PYTHONPATH configuration in bash scripts...\")",
      "Bash(__NEW_LINE__ echo \"2. Testing import without manual sys.path.insert...\")",
      "Bash(__NEW_LINE__ echo \"3. Testing the exact original error scenario...\")",
      "Bash(__NEW_LINE__ echo \"Point 1.1 comprehensive verification completed.\")",
      "Bash(do echo \"Checking $agent...\")",
      "Bash(if grep -q \"## Core.*Competencies\" /mnt/e/AI/my_name_is_claude/.claude/agents/enterprise/*/$agent.md)",
      "Bash(then echo \"  ✓ Has Core Competencies section\")",
      "Bash(else echo \"  ✗ No Core Competencies section found\")",
      "Read(//home/bartosz/.mcp-tools/**)",
      "Bash(git clean:*)",
      "Bash(.claude/templates/version-management/version-sync-validator.sh:*)",
      "Bash(python3:*)",
      "Bash(git show-branch:*)"
    ],
    "deny": [
      "Bash(rm:*)",
      "Bash(rmdir:*)",
      "Bash(unlink:*)",
      "Bash(shred:*)",
      "Bash(dd:*)",
      "Bash(fdisk:*)",
      "Bash(mkfs:*)",
      "Bash(fsck:*)",
      "Bash(parted:*)",
      "Bash(gparted:*)",
      "Bash(cfdisk:*)",
      "Bash(sfdisk:*)",
      "Bash(wipefs:*)",
      "Bash(blkdiscard:*)",
      "Bash(fallocate:*)",
      "Bash(truncate:*)",
      "Write(/etc/**)",
      "Write(/bin/**)",
      "Write(/sbin/**)",
      "Write(/usr/bin/**)",
      "Write(/usr/sbin/**)",
      "Write(/lib/**)",
      "Write(/usr/lib/**)",
      "Write(/boot/**)",
      "Write(/sys/**)",
      "Write(/proc/**)",
      "Write(/dev/**)",
      "Edit(/etc/**)",
      "Edit(/bin/**)",
      "Edit(/sbin/**)",
      "Edit(/usr/bin/**)",
      "Edit(/usr/sbin/**)",
      "Edit(/lib/**)",
      "Edit(/usr/lib/**)",
      "Edit(/boot/**)",
      "Edit(/sys/**)",
      "Edit(/proc/**)",
      "Edit(/dev/**)",
      "MultiEdit(/etc/**)",
      "MultiEdit(/bin/**)",
      "MultiEdit(/sbin/**)",
      "MultiEdit(/usr/bin/**)",
      "MultiEdit(/usr/sbin/**)",
      "MultiEdit(/lib/**)",
      "MultiEdit(/usr/lib/**)",
      "MultiEdit(/boot/**)",
      "MultiEdit(/sys/**)",
      "MultiEdit(/proc/**)",
      "MultiEdit(/dev/**)"
    ]
  }
}